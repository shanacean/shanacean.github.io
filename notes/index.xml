<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Notes on Bangyang Shan</title>
    <link>https://shanacean.github.io/notes/</link>
    <description>Recent content in Notes on Bangyang Shan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 23 Dec 2021 19:33:42 +0800</lastBuildDate><atom:link href="https://shanacean.github.io/notes/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Shlab</title>
      <link>https://shanacean.github.io/notes/shlab/</link>
      <pubDate>Thu, 23 Dec 2021 19:33:42 +0800</pubDate>
      
      <guid>https://shanacean.github.io/notes/shlab/</guid>
      <description>Shell Lab CSAPP Chapter8 Exceptional Control Flow 异常分类:  Trap是用户态向内核请求服务的过程，提供syscall n接口，即系统调用。
系统为异常分配了唯一的非负整数异常号，系统启动时，操作系统初始化一张异常表，起始地址存放在异常表基址寄存器中。异常处理流程如下:  并发流、并行流:
 逻辑流在执行时间上有重叠即为并发流 运行在不同处理器核上的并发流为并行流  pid_t fork(void);
 创建父进程的副本，返回两次，若为0则在子进程中，反之在父进程中。 共享文件描述符  pid_t waitpid(pid_t pid, int *statusup, int options);
 等待进程号为pid的子进程执行结束，waitpid(pid, NULL, 0), statusup、options翻阅man文档 status  WIFEXITED(status): 如果子进程通过调用exit 或者一个返回 (return) 正常终止，就返回真。 WEXITSTATUS (status): 返回一个正常终止的子进程的退出状态。只有在WIFEXITED() 返回为真时，才会定义这个状态。 WIFSIGNALED(status): 如果子进程是因为一个未被捕获的信号终止的，那么就返回真。 WTERMSIG(status): 返回导致子进程终止的信号的编号。只有在WIFSIGNALED() 返回为真时，才定义这个状态。 WIFSTOPPED(status): 如果引起返回的子进程当前是停止的，那么就返回真。 WSTOPSIGC(status): 返回引起子进程停止的信号的编号。只有在 WIFSTOPPED返回为真时，才定义这个状态。 WIFCONTINUED(status): 如果子进程收到 SIGCONT 信号重新启动，则返回真。   return
如果调用进程没有子进程，那么 waitpid 返回 -1, 并且设置 errno 为 ECHILD 。如果 waitpid 函数被一个信号中断，那么它返回 -1,并设置 errno 为 EINTR 。  命令行参数、环境变量参数示意图:</description>
    </item>
    
    <item>
      <title>Cisco Packet Tracer</title>
      <link>https://shanacean.github.io/notes/cpt/</link>
      <pubDate>Wed, 15 Dec 2021 12:45:48 +0800</pubDate>
      
      <guid>https://shanacean.github.io/notes/cpt/</guid>
      <description>直接连接两台PC构建LAN 用交换机构建LAN  pc0可以ping通pc1, 无法ping通pc2、pc3 pc3可以ping通pc2, 无法ping通pc1、pc2 掩码改为255.255.0.0便可以ping通，因为经过掩码运算，此时4台PC处于同一子网192.168.0.0下 二层交换机需要配置网关， 使得两个不同网络之间可以建立连接    集线器与交换机的区别在于，集线器每次都通过广播进行传输，而交换机会维护一个MAC表， 由模拟可验证，hub在第二次ping时仍在广播。  交换机接口地址列表 最初MAC表为空，收到帧时会广播出去。当收到帧时会将源MAC与接收端口做映射记录在MAC表项中。 生成树协议(Spanning Tree Protocol) 如图所示，交换机使用生成树协议使造成环路的两条连接逻辑断开，当减去一条连接时，生成树会自动变化，直到有一条通路。
路由器初步配置 由于双绞线的最长传输距离为100m， 因而交通大学与重庆大学之间不通过双绞线连接。 配置步骤，关闭路由器、添加WIC-1T，重启通过cli配置。
 此时无法跨子网通信式由于路由器还没有转发配置。
 静态路由 配置静态路由后，路由可以进行转发，如下图所示跨子网通信成功。  Router(config)#ip route 0.0.0.0 0.0.0.0 ... // 缺省全部转发给 *.*.*.* 这个IP
 动态路由RIP 全局配置模式下清除静态路由no ip route 192.168.3.0 255.255.255.0 192.168.2.2
show ip route可以查看到标记为R的RIP路由 动态路由OSPF 在全局配置模式下使用no router rip清除rip路由
 可以在特权模式下使用 debug ip ospf events 开启 OSPF 诊断</description>
    </item>
    
    <item>
      <title>Wireshark</title>
      <link>https://shanacean.github.io/notes/wireshark/</link>
      <pubDate>Wed, 27 Oct 2021 15:07:45 +0800</pubDate>
      
      <guid>https://shanacean.github.io/notes/wireshark/</guid>
      <description>数据链路层 实作一: Ethernet帧结构
Wireshark展示的帧中没有FCS(Frame Check Sequence)的原因:
在Wireshark接受这一帧之前，NIC(network interface card)已经在硬件中处理过FCS。 详情见: Wireshark Ethernet Packet format
实作二：子网内/外通信时的 MAC 地址
ping *****发出帧的目的MAC为00-74-9c-9f-40-13，返回帧的源MAC地址也为00-74-9c-9f-40-13，该MAC地址为教室33号计算机的物理地址。 ping qige.io发出帧的目的MAC地址为00-74-9c-9f-40-13, 返回帧的源MAC地址也为00-74-9c-9f-40-13，该MAC地址为网关的物理地址。 ping www.cqjtu.edu.cn发出帧的目的MAC地址为00-74-9c-9f-40-13, 返回帧的源MAC地址也为00-74-9c-9f-40-13，该MAC地址为网关的物理地址。
 在同一子网之内进行通信，是不需要将网关介入其中，只有当主机个非子网设备进行通信的时候，才需要将数据包全部发给网关设备，再经由网关设备进行转发或者是有路由处理等。GateWay wiki
 实作三: ARP解析过程
突然想到手机也有IP，放弃ping机房电脑 😉
 Opcode = 1时表示请求，此时目的MAC为ff:ff:ff:ff:ff:ff即广播 Opcode = 2时表示回应，此时源MAC为手机MAC地址00:74:9c:9f:40:13, 目的MAC为电脑的MAC   根据wireshark抓包可以看到，此次arp请求的目的IP地址为网关，arp回应由网关发送。  假使访问非本子网IP不通过网关，那么广播帧会发送到整个网络中，非常混乱。
  网络层 实作一: IP包结构
一个典型的IPv4包结构如下  一个IPv4 packet头部中既有header length， 也有total length，方便再传输层中将头部和数据割分开。
 实作二: IP包的分段与重组
ping 202.202.240.16 -l 2000 测试ip包分段重组，由于以太网的MCU为1500字节，所以该数据会分片。
Flags字段中DF(Don&amp;rsquo;t fragment)是否分片、MF(More fragment)是否为最后一片。
Fragment Offset标识在数据中的相对位置。 Fragement Offset为1480是由于首片存在20字节的头部。</description>
    </item>
    
    <item>
      <title>Concurrency</title>
      <link>https://shanacean.github.io/notes/concurrency/</link>
      <pubDate>Thu, 21 Oct 2021 13:18:43 +0800</pubDate>
      
      <guid>https://shanacean.github.io/notes/concurrency/</guid>
      <description>Concurency 4个重要概念:
 A critical section is a piece of code that accesses a shared resource, usually a variable or data structure. A race condition (or data race [NM92]) arises if multiple threads of execution enter the critical section at roughly the same time; both attempt to update the shared data structure, leading to a surprising (and perhaps undesirable) outcome. An indeterminate program consists of one or more race conditions; the output of the program varies from run to run, depending on which threads ran when.</description>
    </item>
    
    <item>
      <title>Tlpi</title>
      <link>https://shanacean.github.io/notes/tlpi/</link>
      <pubDate>Sun, 19 Sep 2021 10:51:17 +0800</pubDate>
      
      <guid>https://shanacean.github.io/notes/tlpi/</guid>
      <description>Chapter5 深入探究文件IO 5.1 race conditions 操作共享资源的两个进程（或线程），其结果取决于一个无法预期的顺序，即这些进程(线程)获得 CPU 使用权的先后相对顺序。例如两个进程同时向一个文件尾部添加数据。
 所有系统调用都是以原子操作方式执行的。内核保证了某系统调用中的所有步骤会作为独立操作而一次性加以执行，期间不会为其他进程或线程所中断。
 5.2-3 fcntl 使用fcntl(int fd, int cmd, &amp;hellip;)获取修改访问模式和状态模式。
cmd
 F_SETFL 更新状态标志 F_GETFL 获取当前标志副本  5.4 Relationship Between File Descriptors and Open Files </description>
    </item>
    
    <item>
      <title>Ipconfig</title>
      <link>https://shanacean.github.io/notes/ipconfig_ping/</link>
      <pubDate>Wed, 15 Sep 2021 14:16:58 +0800</pubDate>
      
      <guid>https://shanacean.github.io/notes/ipconfig_ping/</guid>
      <description>Ipconfig  /all 显示所有适配器的完整 TCP/IP 配置。 /flushdns 刷新和重置 DNS 客户端解析程序缓存的内容。  实作一
DHCP(Dynamic Host Configuration Protocol)
 用于内部网或网络服务供应商自动分配IP地址给用户 用于内部网管理员对所有电脑作中央管理  Subnet Mask
 用来指明一个IP地址的哪些位标识的是主机所在的网络地址以及哪些位标识的是主机地址的位掩码。  Gateway
 网关（gateway）能在不同协议间移动资料，而路由器（router）是在不同网络间移动资料，相当于传统所说的IP网关（IP gateway）。   实作二 MAC、IP地址不同，掩码、网关相同。
 当同时连入同一WiFi时，处于同一子网。由ip、掩码 &amp;amp; 运算可得。
  Ping  TTL time to live time 往返时间    ping www.baidu.com域名失败原因可能为域名解析失败，解决方法：
 清除dns缓存 ipconfig/flushdns 重启网卡 service network restart 或修改host文件添加映射ip-域名映射    Tracert Trace Route
实作一
 question1
tracert通过TTL实现，每经过一个路由器，TTL - 1，直到为0时返回，而后主机再将TTL + 1发送，···直到到达目的地结束。how tracert works question2</description>
    </item>
    
    <item>
      <title>Interfaces</title>
      <link>https://shanacean.github.io/notes/interfaces/</link>
      <pubDate>Thu, 12 Aug 2021 09:04:21 +0800</pubDate>
      
      <guid>https://shanacean.github.io/notes/interfaces/</guid>
      <description>使用net/http包中handler时，handler的函数签名为func(ResponseWriter, *Request)，分别为传值和指针。在SO上找到了相关问题:
[In Go HTTP handlers, why is the ResponseWriter a value but the Request a pointer?]
ResponseWriter是一个interface，而request是一个具体的struct。
type response 实现了ResponseWtriter的方法，但对外部不可见。
Interface value Interface value是一种类型. 和C++一样，Go使用了method tables记录该接口所包含的方法，不同点在于c++是通过编译期确定，而Go在运行时计算。
Interface value由两个指针组成，一个指向值对应的数据，另一个指向类型信息。
type Stringer interface { String() string } type Binary uint64 func (b Binary) String() string { return strconv.FormatUint(b.Get(), 10) } func (b Binary) Get() uint64 { return uint64(b) } A pointer to interface 当一个函数签名为a pointer to interface时，无法使用interface声明的方法。
type SomeInterface interface { sayHello() } func doSomething(i *SomeInterface) { i.</description>
    </item>
    
    <item>
      <title>Reader Dev</title>
      <link>https://shanacean.github.io/notes/reader_dev/</link>
      <pubDate>Fri, 04 Jun 2021 15:17:33 +0800</pubDate>
      
      <guid>https://shanacean.github.io/notes/reader_dev/</guid>
      <description>Reader Dev ​	在之前学习flutter过程中，经常查阅Dart pub中的packages，便想到利用相同的形式做一个分享书籍的Web应用，无须注册，可以进行匿名的发布、修改润色他人分享的推书卡片，当然也可以进行删除。目前只开发了增删改查的工作，打星、评论的功能也会后续增加。
 一、开发过程 1.1 开发技术 使用了前后端分离技术，前端采用Vue3框架、后端采用SpringBoot2。
UI框架：TailwindCSS、ElementPlus
 ==TailwindCss==相比Boostrap更具自定义性，更能理解每一步做了什么，比纯css更方便。
 1.2	项目部署 利用腾讯云学生云服务器，学习了linux + docker的部署方式。
整个项目部署在三个docker容器中，分别对应着前端、后端和数据库。
1.3	在学习过程中使用的参考资料 Vue3中文文档
SpringBoot2教程
Tailwindcss
ElementPlus
docker部署vue项目
 二、项目过程中的问题解决 2.1	前端方面   vue 组件间相互通信问题
项目过程中的例子：
1、父组件调用子组件函数
在项目中存在父组件AddForm.vue 和 UploadImage.vue 两个组件。
//子组件UploadImage.vue中 &amp;lt;el-upload ref=&amp;#34;upload&amp;#34;&amp;gt;...&amp;lt;el-upload&amp;gt; //父组件AddForm.vue中 &amp;lt;upload-image @onLoadImage=&amp;#34;getImageUrl&amp;#34; ref=&amp;#34;upload&amp;#34;&amp;gt;&amp;lt;/upload-image&amp;gt; //表单提交后调用子组件中的clearImage()清除图片 this.$refs.upload.clearImage();  ref特性就是为元素或子组件赋予一个ID引用, 父组件中通过this.$refs.refName来访问元素或子组件的实例
 2、子组件向父组件传值
子组件通过 emit 传送
父组件使用 v-on 来绑定接收
//子组件中 handleSuccess(response) { this.url = response //传递上传后返回的图片的链接地址  this.$emit(&amp;#34;onLoadImage&amp;#34;, this.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://shanacean.github.io/notes/trans/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://shanacean.github.io/notes/trans/</guid>
      <description>The elemental composition and chemical status of the obtainedphotocatalysts was studied by XPS, as exhibited in Figs. 2 and s2.Fig.2a-f is the XPS spectrum of the individual element, including thesignal of C, N,O, Mg, In, and S. The XPS spectrum of C 1s (Fig. 2a) forOCN could be divided into three peaks located at 284.8 ev, 286.45 ev,and 288.0 ev. While in the case of OCM3, these three peaks are at284.</description>
    </item>
    
  </channel>
</rss>
